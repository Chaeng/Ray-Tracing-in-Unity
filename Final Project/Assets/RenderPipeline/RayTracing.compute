#include "Ray.compute"
#include "RayHit.compute"
#include "RayCasting/Trace.compute"
#include "Light/RTDirectionalLight.compute"
#include "Light/RTPointLight.compute"
#include "Light/RTSpotLight.compute"
#include "Light/RTSpotLight_UW.compute"
#include "RTSphere.compute"
#include "Geometry/RTTriangle.compute"
#include "Shading/Phong.compute"


// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel CSMain

// Create a RenderTexture with enableRandomWrite flag and set it
// with cs.SetTexture
RWTexture2D<float4> Result;

// Global Settings

// ShadowDepth Map
Texture2DArray<float4> _SpotShadowMap;
StructuredBuffer<RTSpotLight_UW> _ShadowUtility;

//Skybox
Texture2D<float4> _SkyboxTexture;
SamplerState sampler_SkyboxTexture;

// Ambient
float3 _AmbientLightUpper;
float3 _AmbientLightLower;

// Refractive Index
float3 _GlobalRefractiveIndex;

float _FogFactor;
float4 _FogColor;

// Camera
float4x4 _CameraToWorld;
float4x4 _CameraInverseProjection;

// Light
int _NumOfDirectionalLights;
StructuredBuffer<RTDirectionalLight> _DirectionalLights;
int _NumOfPointLights;
StructuredBuffer<RTPointLight> _PointLights;
int _NumOfSpotLights;
StructuredBuffer<RTSpotLight> _SpotLights;

// sphere
int _NumOfSpheres;
StructuredBuffer<RTSphere> _Spheres;

// triangle
int _NumOfTriangles;
StructuredBuffer<RTTriangle> _Triangles;


Ray CreateCameraRay(float2 uv)
{
    // Transform the camera origin to world space
    float3 origin = mul(_CameraToWorld, float4(0.0f, 0.0f, 0.0f, 1.0f)).xyz;
    
    // Invert the perspective projection of the view-space position
    float3 direction = mul(_CameraInverseProjection, float4(uv, 0.0f, 1.0f)).xyz;
    // Transform the direction from camera to world space and normalize
    direction = mul(_CameraToWorld, float4(direction, 0.0f)).xyz;
    direction = normalize(direction);
    return CreateRay(origin, direction);
}


[numthreads(8,8,1)]
void CSMain (uint3 id : SV_DispatchThreadID)
{
    // Get the dimensions of the RenderTexture
    uint width, height;
    Result.GetDimensions(width, height);
    // Transform pixel to [-1,1] range
    float2 uv = float2((id.xy + float2(0.5f, 0.5f)) / float2(width, height) * 2.0f - 1.0f);
    // Get a ray for the UVs
    Ray ray = CreateCameraRay(uv);

    
    // Sample the skybox and write it
    float theta = acos(ray.direction.y) / -PI;
    float phi = atan2(ray.direction.x, -ray.direction.z) / -PI * 0.5f;
    
    // Trace and shade
    RayHit hit = Trace(ray, 
                       _NumOfSpheres,
                       _Spheres,
                       _NumOfTriangles,
                       _Triangles,
                       -1);    // Exclude nothing
                       
    float3 result = Shade( ray,
                           hit,
                          _AmbientLightUpper,
                          _AmbientLightLower,
                          _NumOfDirectionalLights,
                          _DirectionalLights,
                          _NumOfPointLights,
                          _PointLights,
                          _NumOfSpotLights,
                          _SpotLights,
                          _SkyboxTexture,
                          sampler_SkyboxTexture,
                          _NumOfSpheres,
                          _Spheres,
                          _NumOfTriangles,
                          _Triangles,
                          _SpotShadowMap,
                          _ShadowUtility);

     Result[id.xy] = float4(result, 1);
     //uint3 a = uint3(id.x, id.y, 0);
     //Result[id.xy] = _SpotShadowMap[a];
}






