#ifndef PHONG_COMPUTE
#define PHONG_COMPUTE

#include "../Shadow/Shadow.compute"

static const float PI = 3.14159265f;

float3 PhongDiffuseShading(float3 lightDir, float3 lightColor, float3 hitNormal)
{
    float nDotL = dot(hitNormal, lightDir);
    if(nDotL < 0)
    {
        nDotL = 0;
    }
    return lightColor * nDotL;
}

float3 PhongSpecularShading(float3 lightDir, float3 lightColor, float3 rayDir, float3 hitNormal, float shinyness)
{
    float3 R = reflect(-1 * lightDir, hitNormal);
    float vDotR = dot(-1 * rayDir, R);
    if(vDotR < 0)
    {
        vDotR = 0;
    }
    return pow(vDotR, shinyness) * lightColor;
}

float3 Shade(
    inout Ray ray,
    RayHit hit,
    float3 ambientLightUpper,
    float3 ambientLightLower,
    int numOfDirLight,
    StructuredBuffer<RTDirectionalLight> dirLights,
    int numOfPointLight,
    StructuredBuffer<RTPointLight> pointLights,
    int numOfSpotLight,
    StructuredBuffer<RTSpotLight> spotLights,
    Texture2D<float4> skybox,
    SamplerState skyboxSampler,
    int numOfSphere,
    StructuredBuffer<RTSphere> spheres,
    int numOfTriangle,
    StructuredBuffer<RTTriangle> triangles,
    Texture2DArray<float4> shadowMap,
    StructuredBuffer<RTSpotLight_UW> shadowUtility,
    float fogFactor,
    float3 fogColor)
{
    float3 color = float3(0, 0, 0);
    float hitDistance = hit.distance;

    if (hitDistance < 1.#INF)
    {
        float cosNormalToUp = dot(hit.normal, float3(0, 1, 0));
        float upperAmbientRatio = cosNormalToUp / 2 + 0.5f;
        
        color = (upperAmbientRatio) * ambientLightUpper + (1 - upperAmbientRatio) * ambientLightLower;
        float3 tempColor;
        float visibility;
        
        for(int d = 0; d < numOfDirLight; d++)
        {
            tempColor  =   PhongDiffuseShading(dirLights[d].direction, dirLights[d].color, hit.normal) 
                         + PhongSpecularShading(dirLights[d].direction, dirLights[d].color, ray.direction, hit.normal, 5);
            
            visibility = HardShadow(hit.position, 0, dirLights[d].direction, dirLights[d].direction, 
                                              hit.geoIndex, numOfSphere, spheres, numOfTriangle, triangles); 
            color = color + (tempColor * visibility);
        }
        
        for(int p = 0; p < numOfPointLight; p++)
        {
            float3 L = normalize(pointLights[p].position - hit.position);
            tempColor =   PhongDiffuseShading(L, pointLights[p].color, hit.normal) 
                        + PhongSpecularShading(L, pointLights[p].color, ray.direction, hit.normal, 5);
            
            visibility = HardShadow(hit.position, 1, pointLights[p].position, pointLights[p].position,
                                              hit.geoIndex, numOfSphere, spheres, numOfTriangle, triangles);
           
            color = color + (tempColor * visibility);
        } 
        
        for (int s = 0; s < numOfSpotLight; s++)
        {
            float3 L = normalize(spotLights[s].position - hit.position);
            float cosLtoLightDir = dot(-1 * L, -1 * spotLights[s].direction);
            float intensity = 0;
            

            //TODO: Optimize by get rid of conditional statement
            if(cosLtoLightDir >= spotLights[s].cosFullIlluminous)
            {
                // Full illumination
                intensity = 1;
            }
            else if(cosLtoLightDir >= spotLights[s].cosConeAngle)
            {
                // Penumbra
                intensity = pow(abs((cosLtoLightDir - spotLights[s].cosConeAngle) / (spotLights[s].cosFullIlluminous - spotLights[s].cosConeAngle)), spotLights[s].penumbraDecay);
            }
        
            if(intensity > 0)
            {
                tempColor = intensity * (PhongDiffuseShading(L, spotLights[s].color, hit.normal)
                            + PhongSpecularShading(L, spotLights[s].color, ray.direction, hit.normal, 1)
                            );
                
                // check is shadow map is trued on
                if (spotLights[s].enableShadowMap == 1)
                {
                    visibility = SoftShadow(hit, s, spotLights[s], shadowMap, shadowUtility[s]);
    
                }
                else
                {
                    visibility = HardShadow(hit.position, 2, spotLights[s].position, spotLights[s].direction,
                                                  hit.geoIndex, numOfSphere, spheres, numOfTriangle, triangles);
                }
                
                color = color + (tempColor * visibility);
            }
        }
    }
    else
    {
        // Sample the skybox and write it
        float theta = acos(ray.direction.y) / -PI;
        float phi = atan2(ray.direction.x, -ray.direction.z) / -PI * 0.5f;
        color = skybox.SampleLevel(skyboxSampler, float2(phi, theta), 0).xyz;
        
        hitDistance = 1000;   // TODO: Allow config to set the skybox distance for fog calculation
    }
    
    float visInFogRatio = 1 / (exp(hitDistance * fogFactor));
    
    color = (1 - visInFogRatio) * fogColor + (visInFogRatio) * color;
    
    return color;
}

#endif // PHONG_COMPUTE


