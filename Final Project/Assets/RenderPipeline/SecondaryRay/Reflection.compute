
float3 Reflection(
    float3 result,
    inout Ray ray, 
    RayHit hit, 
    float3 ambientColor,
    int numOfDirLight,
    StructuredBuffer<RTDirectionalLight> dirLights,
    int numOfPointLight,
    StructuredBuffer<RTPointLight> pointLights,
    Texture2D<float4> skybox, 
    SamplerState skyboxSampler,
    int _NumOfSpheres,
    StructuredBuffer<RTSphere> _Spheres,
    int numOfTriangle,
    StructuredBuffer<RTTriangle> triangles)
{
	float refl = 0.9;
	float k = 1 - refl;
    float3 final_reflColor = float3(0, 0, 0);
    
    if (hit.distance < 1.#INF)
    {
        // compute reflection
        Ray rayBuffer[3];
        RayHit hitBuffer[3];
        float3 reflColorArr[3];
        reflColorArr[0] = (result * k);
        reflColorArr[1] = float3(0, 0, 0);
        reflColorArr[2] = float3(0, 0, 0);
        Ray curRay = ray;
        RayHit curHit = hit;
        float3 final_reflColor = float3(result.x, result.y, result.z); 
        float3 reflColor = float3(result.x, result.y, result.z); 
        
        for(int i = 0; i < 3; ++i){
                                
            reflColor += (reflColorArr[i]);	
      
            float3 hit_normal_1st = normalize(curHit.normal);
            float3 ray_dir_1st = normalize(curRay.direction);
            float3 R =  reflect(ray_dir_1st, hit_normal_1st); 
            
            // i'th ray
            Ray r1 = CreateRay(curHit.position, R); 
            rayBuffer[i] = r1; 
         
            float theta = acos(rayBuffer[i].direction.y) / -PI;
            float phi = atan2(rayBuffer[i].direction.x, -rayBuffer[i].direction.z) / -PI * 0.5f;  
            reflColor += skybox.SampleLevel(skyboxSampler, float2(phi, theta), 0).xyz;     
                
        }
        final_reflColor = reflColor;
        return final_reflColor;
         
       } else {

        // Sample the skybox and write it
        float theta = acos(ray.direction.y) / -PI;
        float phi = atan2(ray.direction.x, -ray.direction.z) / -PI * 0.5f;
        return skybox.SampleLevel(skyboxSampler, float2(phi, theta), 0).xyz;   
    }	
}


