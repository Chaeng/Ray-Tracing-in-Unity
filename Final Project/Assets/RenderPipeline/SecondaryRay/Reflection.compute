#ifndef REFLECTION_COMPUTE
#define REFLECTION_COMPUTE
#include "../RayCasting/Trace.compute"

float3 Reflection(
    float refl, 
    int maxHit,
    float3 result,
    inout Ray ray, 
    RayHit hit, 
    float3 ambientLightUpper,
    float3 ambientLightLower,
    int numOfDirLight,
    StructuredBuffer<RTDirectionalLight> dirLights,
    int numOfPointLight,
    StructuredBuffer<RTPointLight> pointLights,
    int numOfSpotLight,
    StructuredBuffer<RTSpotLight> spotLights,
    Texture2D<float4> skybox, 
    SamplerState skyboxSampler,
    int numOfSpheres,
    StructuredBuffer<RTSphere> spheres,
    int numOfTriangle,
    StructuredBuffer<RTTriangle> triangles,
    Texture2DArray<float4> shadowMap,
    StructuredBuffer<RTSpotLight_UW> shadowUtility,
    float fogFactor,
    float3 fogColor,
    int numOfMaterials,
    StructuredBuffer<RTMaterial> materials)
{
    if (hit.distance < 1.#INF)
    {   
           if(maxHit == 0){
           float3 color = float3(0, 0, 0);
                      color += Shade(
                                ray, 
                                hit, 
                                ambientLightUpper,
                                ambientLightLower,
                                numOfDirLight,
                                dirLights,
                                numOfPointLight,
                                pointLights,
                                numOfSpotLight, 
                                spotLights,
                                skybox, 
                                skyboxSampler,
                                numOfSpheres,
                                spheres,
                                numOfTriangle,
                                triangles,
                                shadowMap,
                                shadowUtility,
                                fogFactor,
                                fogColor,
                                numOfMaterials,
                                materials);
                       return color;
           }

          
         int numHit = 0;
         Ray curRay = ray;
         RayHit curHit = hit;
                
         while(numHit <= maxHit && curHit.distance < 1.#INF){
         
             float3 hitNml = normalize(curHit.normal);
             float3 rayNml = normalize(curRay.direction);
             float3 reflectDir =  reflect(rayNml, hitNml); 
             Ray newRay = CreateRay(curHit.position, reflectDir);
             curRay = newRay;
             RayHit newHit = CreateRayHit();
             newHit = Trace(curRay, numOfSpheres, spheres,  numOfTriangle, triangles, curHit.geoIndex);
             curHit = newHit;
             numHit++;
         }
         
         if(numHit == 1 && numHit <= maxHit)
         {
           float3 color = Shade(
                                ray, 
                                hit, 
                                ambientLightUpper,
                                ambientLightLower,
                                numOfDirLight,
                                dirLights,
                                numOfPointLight,
                                pointLights,
                                numOfSpotLight, 
                                spotLights,
                                skybox, 
                                skyboxSampler,
                                numOfSpheres,
                                spheres,
                                numOfTriangle,
                                triangles,
                                shadowMap,
                                shadowUtility,
                                fogFactor,
                                fogColor,
                                numOfMaterials,
                                materials);
             float theta = acos(curRay.direction.y) / -PI;
             float phi = atan2(curRay.direction.x, -curRay.direction.z) / -PI * 0.5f;
             float3 c1 = skybox.SampleLevel(skyboxSampler, float2(phi, theta), 0).xyz;
             //return (color * (1 - refl)) + (c1);
             return (result * (1 - refl)) + c1;
 
         } else if(numHit == 2 && numHit <= maxHit){
             //reset ray and rayhit
             curRay = ray;
             curHit = hit;
         
             Ray rayArr[3];
             rayArr[0] = CreateRay(curHit.position, curRay.direction);
             rayArr[1] = CreateRay(hit.position, curRay.direction);
             rayArr[2] = CreateRay(hit.position, curRay.direction);
             
             RayHit hitArr[3];
             hitArr[0] = curHit;
             hitArr[1] = CreateRayHit();
             hitArr[2] = CreateRayHit();
                       
             int count = 1;
             while(count < 3){
                           
                  float3 hitNml = normalize(curHit.normal);
                  float3 rayNml = normalize(curRay.direction);
                  float3 reflectDir =  reflect(rayNml, hitNml); 
                  Ray newRay = CreateRay(curHit.position, reflectDir);
                  rayArr[count] = newRay;
                  curRay = newRay;
                  RayHit newHit = Trace(curRay, numOfSpheres, spheres,  numOfTriangle, triangles, curHit.geoIndex);
                  hitArr[count] = newHit;
                  curHit = newHit;
                  count++;
             }
             
             float theta = acos(curRay.direction.y) / -PI;
             float phi = atan2(curRay.direction.x, -curRay.direction.z) / -PI * 0.5f;
             
             float3 colorArr[2];
             colorArr[0] = float3(0, 0, 0);
             colorArr[1] = (skybox.SampleLevel(skyboxSampler, float2(phi, theta), 0).xyz) * refl;
             float3 color = Shade(
                                rayArr[0], 
                                hitArr[0], 
                                ambientLightUpper,
                                ambientLightLower,
                                numOfDirLight,
                                dirLights,
                                numOfPointLight,
                                pointLights,
                                numOfSpotLight, 
                                spotLights,
                                skybox, 
                                skyboxSampler,
                                numOfSpheres,
                                spheres,
                                numOfTriangle,
                                triangles,
                                shadowMap,
                                shadowUtility,
                                fogFactor,
                                fogColor,
                                numOfMaterials,
                                materials);
                 colorArr[0] += color;    
                  
            //return (colorArr[0] * k) + colorArr[1]; 
            float3 c1 = (colorArr[0] * (1 - refl)) + colorArr[1];
            return (result * (1 - refl)) + (c1); 
            //return (result * (1 - refl)) + (c1 * refl);
         } else if(numHit <= maxHit && numHit == 3){

             curRay = ray;
             curHit = hit;
         
             Ray rayArr[4];
             rayArr[0] = CreateRay(curHit.position, curRay.direction);
             rayArr[1] = CreateRay(hit.position, curRay.direction);
             rayArr[2] = CreateRay(hit.position, curRay.direction);
             rayArr[3] = CreateRay(hit.position, curRay.direction);
             
             RayHit hitArr[4];
             hitArr[0] = curHit;
             hitArr[1] = CreateRayHit();
             hitArr[2] = CreateRayHit();
             hitArr[3] = CreateRayHit();
                       
             int count = 1;
             while(count < 4){
                           
                  float3 hitNml = normalize(curHit.normal);
                  float3 rayNml = normalize(curRay.direction);
                  float3 reflectDir =  reflect(rayNml, hitNml); 
                  Ray newRay = CreateRay(curHit.position, reflectDir);
                  rayArr[count] = newRay;
                  curRay = newRay;
                  RayHit newHit = Trace(curRay, numOfSpheres, spheres,  numOfTriangle, triangles, curHit.geoIndex);
                  hitArr[count] = newHit;
                  curHit = newHit;
                  count++;
             }
             
             float theta = acos(curRay.direction.y) / -PI;
             float phi = atan2(curRay.direction.x, -curRay.direction.z) / -PI * 0.5f;
             
             float3 colorArr[4];
             colorArr[0] = float3(0, 0, 0);
             colorArr[1] = float3(0, 0, 0);
             colorArr[2] = float3(0, 0, 0);
             colorArr[3] = skybox.SampleLevel(skyboxSampler, float2(phi, theta), 0).xyz;
             
             for(int i_3 = 0; i_3 < 3; i_3++){
                 float3 color = Shade(
                                rayArr[i_3], 
                                hitArr[i_3], 
                                ambientLightUpper,
                                ambientLightLower,
                                numOfDirLight,
                                dirLights,
                                numOfPointLight,
                                pointLights,
                                numOfSpotLight, 
                                spotLights,
                                skybox, 
                                skyboxSampler,
                                numOfSpheres,
                                spheres,
                                numOfTriangle,
                                triangles,
                                shadowMap,
                                shadowUtility,
                                fogFactor,
                                fogColor,
                                numOfMaterials,
                                materials);
                 colorArr[i_3] = color;    
             }   
             float3 c1 = (colorArr[2] * (1 - refl)) + colorArr[3];
             float3 c2 = (colorArr[1] * (1 - refl)) + (c1 * refl);
             float3 c3 = (colorArr[0] * (1 - refl)) + (c2 * refl);
             return (result * (1 - refl)) + (c3 * refl);
             //return (colorArr[0] * (1 - refl)) + (c2 * refl);

         } else if (numHit == 4 && numHit <= maxHit ){
             //reset ray and rayhit
             curRay = ray;
             curHit = hit;
         
             Ray rayArr[5];
             rayArr[0] = CreateRay(curHit.position, curRay.direction);
             rayArr[1] = CreateRay(hit.position, curRay.direction);
             rayArr[2] = CreateRay(hit.position, curRay.direction);
             rayArr[3] = CreateRay(hit.position, curRay.direction);
             rayArr[4] = CreateRay(hit.position, curRay.direction);
             
             RayHit hitArr[5];
             hitArr[0] = curHit;
             hitArr[1] = CreateRayHit();
             hitArr[2] = CreateRayHit();
             hitArr[3] = CreateRayHit();
             hitArr[4] = CreateRayHit();
                       
             int count = 1;
             while(count < 5){
                           
                  float3 hitNml = normalize(curHit.normal);
                  float3 rayNml = normalize(curRay.direction);
                  float3 reflectDir =  reflect(rayNml, hitNml); 
                  Ray newRay = CreateRay(curHit.position, reflectDir);
                  rayArr[count] = newRay;
                  curRay = newRay;
                  RayHit newHit = Trace(curRay, numOfSpheres, spheres,  numOfTriangle, triangles, curHit.geoIndex);
                  hitArr[count] = newHit;
                  curHit = newHit;
                  count++;
             }
             
             float theta = acos(curRay.direction.y) / -PI;
             float phi = atan2(curRay.direction.x, -curRay.direction.z) / -PI * 0.5f;
             
             float3 colorArr[5];
             colorArr[0] = float3(0, 0, 0);
             colorArr[1] = float3(0, 0, 0);
             colorArr[2] = float3(0, 0, 0);
             colorArr[3] = float3(0, 0, 0);
             colorArr[4] = skybox.SampleLevel(skyboxSampler, float2(phi, theta), 0).xyz;
             
             for(int i = 3; i >= 0; --i){
                 float3 color = Shade(
                                rayArr[i], 
                                hitArr[i], 
                                ambientLightUpper,
                                ambientLightLower,
                                numOfDirLight,
                                dirLights,
                                numOfPointLight,
                                pointLights,
                                numOfSpotLight, 
                                spotLights,
                                skybox, 
                                skyboxSampler,
                                numOfSpheres,
                                spheres,
                                numOfTriangle,
                                triangles,
                                shadowMap,
                                shadowUtility,
                                fogFactor,
                                fogColor,
                                numOfMaterials,
                                materials);
                 colorArr[i] = color;    
             }     
             
             float3 c1 = (colorArr[3] * (1 - refl)) + colorArr[4];
             float3 c2 = (colorArr[2] * (1 - refl)) + (c1 * refl);
             float3 c3 = (colorArr[1] * (1 - refl)) + (c2 * refl);
             float3 c4 = (colorArr[0] * (1 - refl)) + (c3 * refl);
             return (result * (1 - refl)) + (c4 * refl);
             //return (colorArr[0] * (1 - refl)) + (c3 * refl);
         } else if(numHit <= maxHit && numHit == 5){
             curRay = ray;
             curHit = hit;
         
             Ray rayArr[6];
             rayArr[0] = CreateRay(curHit.position, curRay.direction);
             rayArr[1] = CreateRay(hit.position, curRay.direction);
             rayArr[2] = CreateRay(hit.position, curRay.direction);
             rayArr[3] = CreateRay(hit.position, curRay.direction);
             rayArr[4] = CreateRay(hit.position, curRay.direction);
             rayArr[5] = CreateRay(hit.position, curRay.direction);
             
             RayHit hitArr[6];
             hitArr[0] = curHit;
             hitArr[1] = CreateRayHit();
             hitArr[2] = CreateRayHit();
             hitArr[3] = CreateRayHit();
             hitArr[4] = CreateRayHit();
             hitArr[5] = CreateRayHit();
                       
             int count = 1;
             while(count < 6){
                           
                  float3 hitNml = normalize(curHit.normal);
                  float3 rayNml = normalize(curRay.direction);
                  float3 reflectDir =  reflect(rayNml, hitNml); 
                  Ray newRay = CreateRay(curHit.position, reflectDir);
                  rayArr[count] = newRay;
                  curRay = newRay;
                  RayHit newHit = Trace(curRay, numOfSpheres, spheres,  numOfTriangle, triangles, curHit.geoIndex);
                  hitArr[count] = newHit;
                  curHit = newHit;
                  count++;
             }
             
             float theta = acos(curRay.direction.y) / -PI;
             float phi = atan2(curRay.direction.x, -curRay.direction.z) / -PI * 0.5f;
             
             float3 colorArr[6];
             colorArr[0] = float3(0, 0, 0);
             colorArr[1] = float3(0, 0, 0);
             colorArr[2] = float3(0, 0, 0);
             colorArr[3] = float3(0, 0, 0);
             colorArr[4] = float3(0, 0, 0);
             colorArr[5] = skybox.SampleLevel(skyboxSampler, float2(phi, theta), 0).xyz;
             
             for(int i = 0 ; i < 5; i++){
                 float3 color = Shade(
                                rayArr[i], 
                                hitArr[i], 
                                ambientLightUpper,
                                ambientLightLower,
                                numOfDirLight,
                                dirLights,
                                numOfPointLight,
                                pointLights,
                                numOfSpotLight, 
                                spotLights,
                                skybox, 
                                skyboxSampler,
                                numOfSpheres,
                                spheres,
                                numOfTriangle,
                                triangles,
                                shadowMap,
                                shadowUtility,
                                fogFactor,
                          fogColor,
                                numOfMaterials,
                                materials);
                 colorArr[i] = color;    
             }     
             
             float3 c1 = (colorArr[4] * (1 - refl)) + colorArr[5];
             float3 c2 = (colorArr[3] * (1 - refl)) + (c1 * refl);
             float3 c3 = (colorArr[2] * (1 - refl)) + (c2 * refl);
             float3 c4 = (colorArr[1] * (1 - refl)) + (c3 * refl);             
             float3 c5 = (colorArr[0] * (1 - refl)) + (c4 * refl);
             return (result * (1 - refl)) + (c5 * refl);           
         } else { // numHit = 6
             curRay = ray;
             curHit = hit;
         
             Ray rayArr[7];
             rayArr[0] = CreateRay(curHit.position, curRay.direction);
             for(int rayIndex = 1; rayIndex < 7; rayIndex++){
                rayArr[rayIndex] = CreateRay(curHit.position, curRay.direction);
             } 
             
             RayHit hitArr[7];
             hitArr[0] = curHit;
             
             for(int hitIndexMaxHit6 = 1; hitIndexMaxHit6 < 7; hitIndexMaxHit6++){
                 hitArr[hitIndexMaxHit6] = CreateRayHit();
             }
                       
             int count = 1;
             while(count < 7){
                           
                  float3 hitNml = normalize(curHit.normal);
                  float3 rayNml = normalize(curRay.direction);
                  float3 reflectDir =  reflect(rayNml, hitNml); 
                  Ray newRay = CreateRay(curHit.position, reflectDir);
                  rayArr[count] = newRay;
                  curRay = newRay;
                  RayHit newHit = Trace(curRay, numOfSpheres, spheres,  numOfTriangle, triangles, curHit.geoIndex);
                  hitArr[count] = newHit;
                  curHit = newHit;
                  count++;
             }
             
             float theta = acos(curRay.direction.y) / -PI;
             float phi = atan2(curRay.direction.x, -curRay.direction.z) / -PI * 0.5f;
             
             float3 colorArr[7];
             for(int indexMax6 = 0; indexMax6 < 7; indexMax6++){
                colorArr[indexMax6] = float3(0, 0, 0);
             }
             colorArr[6] = skybox.SampleLevel(skyboxSampler, float2(phi, theta), 0).xyz;
             
             for(int i = 0 ; i < 6; i++){
                 float3 color = Shade(
                                rayArr[i], 
                                hitArr[i], 
                                ambientLightUpper,
                                ambientLightLower,
                                numOfDirLight,
                                dirLights,
                                numOfPointLight,
                                pointLights,
                                numOfSpotLight, 
                                spotLights,
                                skybox, 
                                skyboxSampler,
                                numOfSpheres,
                                spheres,
                                numOfTriangle,
                                triangles,
                                shadowMap,
                                shadowUtility,
                                fogFactor,
                          fogColor,
                                numOfMaterials,
                                materials);
                 colorArr[i] = color;    
             }     
             float3 c0 = (colorArr[5] * (1 - refl)) + colorArr[6];
             float3 c1 = (colorArr[4] * (1 - refl)) + (c0 * refl);
             float3 c2 = (colorArr[3] * (1 - refl)) + (c1 * refl);
             float3 c3 = (colorArr[2] * (1 - refl)) + (c2 * refl);
             float3 c4 = (colorArr[1] * (1 - refl)) + (c3 * refl);             
             float3 c5 = (colorArr[0] * (1 - refl)) + (c4 * refl);
             return (result * (1 - refl)) + (c5 * refl);           
         }
    }  
    else {

        // if not a geometry, it must be a skybox
        float theta = acos(ray.direction.y) / -PI;
        float phi = atan2(ray.direction.x, -ray.direction.z) / -PI * 0.5f;
        return skybox.SampleLevel(skyboxSampler, float2(phi, theta), 0).xyz;   
    }	
}

#endif // REFLECTION_COMPUTE
