float3 Reflection(
    float3 result,
    inout Ray ray, 
    RayHit hit, 
    float3 ambientColor,
    int numOfDirLight,
    StructuredBuffer<RTDirectionalLight> dirLights,
    int numOfPointLight,
    StructuredBuffer<RTPointLight> pointLights,
    Texture2D<float4> skybox, 
    SamplerState skyboxSampler)
{
	float refl = 0.5;
	float k = 1 - refl;
    float3 reflColor = float3(0, 0, 0); 
    
    if (hit.distance < 1.#INF)
    {
        // compute reflection
        reflColor += (result * k);	
	    float3 reflectResult[3];
	    reflectResult[0] = result;
	    
	    Ray rayBuffer[3];
	    
	    float3 hit_normal_1st = normalize(hit.normal);
	    float3 ray_dir_1st = normalize(ray.direction);
	    float3 R =  reflect(ray_dir_1st, hit_normal_1st); 
	    
	    // 1st ray
	    Ray r1 = CreateRay(hit.position, R);  rayBuffer[1] = r1;
	    
	    // Sample the skybox and write it
        float theta = acos(r1.direction.y) / -PI;
        float phi = atan2(r1.direction.x, -r1.direction.z) / -PI * 0.5f;
        reflColor +=  skybox.SampleLevel(skyboxSampler, float2(phi, theta), 0).xyz;
	    
    } else {

        // Sample the skybox and write it
        float theta = acos(ray.direction.y) / -PI;
        float phi = atan2(ray.direction.x, -ray.direction.z) / -PI * 0.5f;
        return skybox.SampleLevel(skyboxSampler, float2(phi, theta), 0).xyz;   
    }
	return reflColor;
}


