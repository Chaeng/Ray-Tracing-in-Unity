float ShadowRayCast( Ray ray,
                     int ExceptIndex,
                     int numOfSphere,
                     StructuredBuffer<RTSphere> spheres,
                     int numOfTriangle,
                     StructuredBuffer<RTTriangle> triangles) 
{
    RayHit record = CreateRayHit();

    for (int i = 0; i < numOfSphere; i++)
    {
        if (spheres[i].id == ExceptIndex)
        {
            continue;
        }
            
        IntersectSphere(ray, record, spheres[i]);
        
        if (record.geoIndex != -1)
        {
            return 0;
        }
    }

    for (int t = 0; t < numOfTriangle; t++)
    {
        if (triangles[t].id == ExceptIndex)
        {
            continue;
        }

        IntersectTriangle(ray, record, triangles[t]);

        if (record.geoIndex != -1)
        {
            return 0;
        }
    }

    return 1;

}

float ShadowFilter(int mFilterRes,
                    int mResolution,
                    int exceptIndex,
                    float dis,
                    uint3 id,
                    Texture2DArray<float4> shadowMap)
{

    int i = id.x;
    int j = id.y;

    float len = 1 + 2 * mFilterRes;
    float count = 0;

    float block = 0;
    for (int a = i - mFilterRes; a <= i + mFilterRes; a++)
    {
        if (a < 0) // out of boundry
        {
            a = 0;
        }
        if (a > (mResolution - 1))
        {
            break;
        }

        for (int b = j - mFilterRes; b <= j + mFilterRes; b++)
        {
            if (b < 0)
            {
                b = 0;
            }

            if (b > mResolution - 1)
            {
                break;
            }

            id.x = a;
            id.y = b;
            float4 map = shadowMap[id.xyz];

            if (dis > map.x && map.y != exceptIndex)
            {
                block++;
                count++;
            }
            else
            {
                count++;
            }
        }
    }
    float res = block / count;
    return 1 - res;
}

float SoftShadow(RayHit hit,
                 int MapIndex,
                 RTSpotLight spot,
                 Texture2DArray<float4> shadowMap,
                 RTSpotLight_UW shadowUtility)
{
    float result;
    float3 ray = hit.position - spot.position;
    float dis = length(ray);
    ray = normalize(ray);

    float cos = dot(ray, -spot.direction);
    float3 pointP = spot.position + (10 / cos) * ray;

    float dw = dot(pointP - shadowUtility.Pref, shadowUtility.W);
    float du = dot(pointP - shadowUtility.Pref, shadowUtility.U);

    int i = (int) (du / shadowUtility.PixelSize);
    int j = (int) (dw / shadowUtility.PixelSize);

    uint3 id = uint3(i, j, MapIndex);

    if (spot.ShadowFilterRes > 0)
    {
        result = ShadowFilter(spot.ShadowFilterRes, shadowUtility.mapRes, hit.geoIndex, dis, id, shadowMap);
        return result;
    }

    // not use ShadowFilter
    float4 map = shadowMap[id.xyz];

    if (dis > map.x && map.y != hit.geoIndex)
    {
        result = 0;
    }
    else
    {
        result = 1;
    }

    return result;
}

// position: visible point position
// lightType: 0 ---> Directional
//            1 ---> Point
//            2 ---> Spot 
// lightPosition: The position of point and spot light
// direction: The diretion of direction and spot light 
// ExceptType : Will ignore the index to prevent self shadow
//            0 ---> Sphere
//            1 ---> Triangle
// ExcepteIndex: index the of object
float HardShadow( float3 position,
                  int lightType,
                  float3 lightPosition,
                  float3 direction,
                  int ExceptIndex,
                  int numOfSphere,
                  StructuredBuffer<RTSphere> spheres,
                  int numOfTriangle,
                  StructuredBuffer<RTTriangle> triangles)
{
    Ray ray;
    float result;

    if (lightType == 0) // directional light
    {
        ray = CreateRay(position, direction);

    } else if (lightType == 1) { // point light

        float3 dir = normalize(lightPosition - position);
        ray = CreateRay(position, dir);

    } else if (lightType == 2) { // spot light

        float3 dir = normalize(lightPosition - position);
        ray = CreateRay(position, dir);
        
    }

    result = ShadowRayCast(ray, ExceptIndex, numOfSphere, spheres, numOfTriangle, triangles);
    return result;
}
