#include "../RTSphere.compute"
#include "../Geometry/RTTriangle.compute"
#include "../Ray.compute"
#include "../RayHit.compute"

#pragma kernel ShadowMap


RWTexture2D<float4> _ShadowMap; // Output
float _PixelSize;           // Spot Light Direction
float3 _SpotLightPos;           // Spot Light Position
int _NumOfSpheres;              // Number of sphere
StructuredBuffer<RTSphere> _Spheres;        // Sphere structure
int _NumOfTriangles;            // Number of triangle
StructuredBuffer<RTTriangle> _Triangles;    // Triangle structure

float3 _PrefPosition;
float3 _UnitU;
float3 _UnitW;

float4 computeDepth(float3 lightPosition, float3 pref, float pixelSize, float3 uVector, float3 wVector, int x, int y)
{
    float3 pixelPosition = pref + x * uVector * pixelSize + y * wVector * pixelSize;
    float3 direction = normalize(pixelPosition - lightPosition);

    Ray ray = CreateRay(lightPosition, direction);
    RayHit record = CreateRayHit();

    for (int i = 0; i < _NumOfSpheres; i++)
    {           
        IntersectSphere(ray, record, _Spheres[i], i);

    }

    for (int t = 0; t < _NumOfTriangles; t++)
    {
        IntersectTriangle(ray, record, _Triangles[t], t);
    }

    float4 result = float4(record.distance, record.GeoType, record.GeoIndex, 0);
    return result;
}


[numthreads(8,8,1)]
void ShadowMap (uint3 id : SV_DispatchThreadID)
{
    //float4 DepthInfo = computeDepth(_SpotLightPos, _PrefPosition, _PixelSize, _UnitU, _UnitW, id.x, id.y);
    //_ShadowMap1[id.xy] = DepthInfo;

    //uint3 index = uint3(id.x, id.y, id.z);
    _ShadowMap[id.xy] = float4(1,1,1,0);

}
