#ifndef SPATIAL_GRID_TRACE_COMPUTE
#define SPATIAL_GRID_TRACE_COMPUTE

#include "../Ray.compute"
#include "../RayHit.compute"
#include "RayBoxIntersection.compute"
#include "SpatialGrid.compute"
#include "../Geometry/RTTriangle.compute"


GridStep DetermineGridStep(Ray ray)
{
    GridStep step;
    
    step.x = ray.direction.x >= 0 ? 1 : -1;
    step.y = ray.direction.y >= 0 ? 1 : -1;
    step.z = ray.direction.z >= 0 ? 1 : -1;
    
    return step;
};


void GetNumberOfGeometryInGrid(SpatialGridIndex index, StructuredBuffer<int> geomGridList, int dimension, inout int start, inout int count)
{
    int i = index.z + index.y * dimension + index.x * dimension * dimension;
    start = geomGridList[i];
    count = geomGridList[i + 1] - geomGridList[i];   // The index is offset by 1 due to leading zero field
};


RayHit LocalGridTrace(Ray ray, SpatialGridIndex index, StructuredBuffer<int> geomGridList, StructuredBuffer<RTTriangle> triangles, SpatialGrid grids, int excludeGeometry)
{
    RayHit bestHit = CreateRayHit();

    int start = 0;
    int count = 0;
    
    GetNumberOfGeometryInGrid(index, geomGridList, grids.dimension, start, count);
    
    if(count == 0)
    {
        return bestHit;
    }
    
    for(int t = start; t < count; t++)
    {
        if(triangles[t].id == excludeGeometry)
        {
            continue;
        }
        IntersectTriangle(ray, bestHit, triangles[t]);
    }
    
    return bestHit;
};




RayHit SpatialGridTrace(Ray ray, SpatialGrid spatialGrid, StructuredBuffer<int> geomGridList, StructuredBuffer<RTTriangle> triangles, int excludeGeometry)
{
    RayHit bestHit = CreateRayHit();
    
    float t0 = -1.#INF;
    float t1 = 1.#INF;

    
    if (RayBoxIntersection(ray, spatialGrid.min, spatialGrid.max, t0, t1))
    {
        float3 entry = GetPoint(ray, t1);
        
        GridStep step = DetermineGridStep(ray);
        
    
        for(int t = 0; t < _NumOfTriangles; t++)
        {
            if(_Triangles[t].id == excludeGeometry)
            {
                continue;
            }
            IntersectTriangle(ray, bestHit, _Triangles[t]);
        }
    }
    
    return bestHit;
};

#endif //SPATIALGRIDTRACE_COMPUTE