#ifndef RTMATERIAL_COMPUTE
#define RTMATERIAL_COMPUTE

struct RTMaterial
{
    int id;

    // classic Ambient, Diffuse, Specular
    float3 ka;
    float3 ks;
    float3 kd;
    float n;

    // support for transparency and refractiveIndex
    float transparency;
    float refractiveIndex; 

    // support for reflection
    float reflectivity;
    
    // support for normal and positional map
    float3 normal;
    float3 position;

    // support for textures
    int texIndexKa;
    int texIndexKd;
    int texIndexKs;
};

RTMaterial GetDefaultMaterial()
{
    RTMaterial mat;

    mat.id = -1;

    // classic Ambient, Diffuse, Specular
    mat.ka = float3(0, 0, 0);
    mat.ks = float3(0, 0, 0);
    mat.kd = float3(0, 0, 0);
    mat.n = 1.0f;

    // support for transparency and refractiveIndex
    mat.transparency = 0.0f;
    mat.refractiveIndex = 0.0f;

    // support for reflection
    mat.reflectivity = 0.0f;

    // support for normal and positional map
    mat.normal = float3(0, 0, 0);
    mat.position = float3(0, 0, 0);

    // support for textures
    mat.texIndexKa = -1;
    mat.texIndexKd = -1;
    mat.texIndexKs = -1;

    return mat;
}

RTMaterial GetIndexedMaterial(StructuredBuffer<RTMaterial> materials,
    int numOfMaterials,
    int index)
{
    RTMaterial mat;

    // If index valid, then retrieve material
    if (index >= 0 && index < numOfMaterials)
    {
        mat = materials[index];
    }
    // Otherwise, return default material
    else
    {
        mat = GetDefaultMaterial();
    }

    return mat;
}

#endif  // RTMATERIAL_COMPUTE
